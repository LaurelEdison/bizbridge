// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sectors.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addCompanySector = `-- name: AddCompanySector :one
INSERT INTO profile_sectors(company_id, sector_id)
VALUES($1, $2)
RETURNING company_id, sector_id
`

type AddCompanySectorParams struct {
	CompanyID uuid.UUID
	SectorID  uuid.UUID
}

func (q *Queries) AddCompanySector(ctx context.Context, arg AddCompanySectorParams) (ProfileSector, error) {
	row := q.db.QueryRowContext(ctx, addCompanySector, arg.CompanyID, arg.SectorID)
	var i ProfileSector
	err := row.Scan(&i.CompanyID, &i.SectorID)
	return i, err
}

const getSectors = `-- name: GetSectors :many
SELECT id, name FROM sectors
`

func (q *Queries) GetSectors(ctx context.Context) ([]Sector, error) {
	rows, err := q.db.QueryContext(ctx, getSectors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sector
	for rows.Next() {
		var i Sector
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSectorsByCompany = `-- name: GetSectorsByCompany :many
SELECT s.id, s.name
FROM profile_sectors cs
JOIN sectors s ON s.id = cs.sector_id
WHERE cs.company_id = $1
ORDER BY s.name
`

func (q *Queries) GetSectorsByCompany(ctx context.Context, companyID uuid.UUID) ([]Sector, error) {
	rows, err := q.db.QueryContext(ctx, getSectorsByCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sector
	for rows.Next() {
		var i Sector
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCompanySector = `-- name: RemoveCompanySector :exec
DELETE FROM profile_sectors
WHERE company_id = $1 AND sector_id = $2
`

type RemoveCompanySectorParams struct {
	CompanyID uuid.UUID
	SectorID  uuid.UUID
}

func (q *Queries) RemoveCompanySector(ctx context.Context, arg RemoveCompanySectorParams) error {
	_, err := q.db.ExecContext(ctx, removeCompanySector, arg.CompanyID, arg.SectorID)
	return err
}
