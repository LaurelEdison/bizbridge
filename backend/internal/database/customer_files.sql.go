// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customer_files.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCustomerFile = `-- name: CreateCustomerFile :one
INSERT INTO customer_files(id, customer_id, category, file_name, url, uploaded_at) 
VALUES ( $1, $2, $3, $4, $5, $6)
RETURNING id, customer_id, category, file_name, url, uploaded_at
`

type CreateCustomerFileParams struct {
	ID         uuid.UUID
	CustomerID uuid.UUID
	Category   string
	FileName   string
	Url        string
	UploadedAt time.Time
}

func (q *Queries) CreateCustomerFile(ctx context.Context, arg CreateCustomerFileParams) (CustomerFile, error) {
	row := q.db.QueryRowContext(ctx, createCustomerFile,
		arg.ID,
		arg.CustomerID,
		arg.Category,
		arg.FileName,
		arg.Url,
		arg.UploadedAt,
	)
	var i CustomerFile
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Category,
		&i.FileName,
		&i.Url,
		&i.UploadedAt,
	)
	return i, err
}

const deleleCustomerFile = `-- name: DeleleCustomerFile :exec
DELETE FROM customer_files WHERE id = $1
`

func (q *Queries) DeleleCustomerFile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleleCustomerFile, id)
	return err
}

const getCustomerFilesFromCustomerID = `-- name: GetCustomerFilesFromCustomerID :many
SELECT id, customer_id, category, file_name, url, uploaded_at FROM customer_Files WHERE customer_id = $1
`

func (q *Queries) GetCustomerFilesFromCustomerID(ctx context.Context, customerID uuid.UUID) ([]CustomerFile, error) {
	rows, err := q.db.QueryContext(ctx, getCustomerFilesFromCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomerFile
	for rows.Next() {
		var i CustomerFile
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Category,
			&i.FileName,
			&i.Url,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
