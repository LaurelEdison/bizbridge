// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customers.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (id, name, email, password_hash, country, description, photourl, created_at, updated_at)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9)
RETURNING id, name, email, password_hash, country, description, photourl, created_at, updated_at
`

type CreateCustomerParams struct {
	ID           uuid.UUID
	Name         string
	Email        string
	PasswordHash string
	Country      string
	Description  sql.NullString
	Photourl     sql.NullString
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Country,
		arg.Description,
		arg.Photourl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Country,
		&i.Description,
		&i.Photourl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, name, email, password_hash, country, description, photourl, created_at, updated_at FROM customers WHERE email = $1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Country,
		&i.Description,
		&i.Photourl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, name, email, password_hash, country, description, photourl, created_at, updated_at FROM customers WHERE id = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Country,
		&i.Description,
		&i.Photourl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCustomerCountry = `-- name: UpdateCustomerCountry :exec
UPDATE customers
SET country = $2,
updated_at = $3
WHERE id = $1
`

type UpdateCustomerCountryParams struct {
	ID        uuid.UUID
	Country   string
	UpdatedAt time.Time
}

func (q *Queries) UpdateCustomerCountry(ctx context.Context, arg UpdateCustomerCountryParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerCountry, arg.ID, arg.Country, arg.UpdatedAt)
	return err
}

const updateCustomerDescription = `-- name: UpdateCustomerDescription :exec
UPDATE customers
SET description = $2,
updated_at = $3
WHERE id = $1
`

type UpdateCustomerDescriptionParams struct {
	ID          uuid.UUID
	Description sql.NullString
	UpdatedAt   time.Time
}

func (q *Queries) UpdateCustomerDescription(ctx context.Context, arg UpdateCustomerDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerDescription, arg.ID, arg.Description, arg.UpdatedAt)
	return err
}

const updateCustomerEmail = `-- name: UpdateCustomerEmail :exec
UPDATE customers
SET email = $2,
updated_at = $3
WHERE id = $1
`

type UpdateCustomerEmailParams struct {
	ID        uuid.UUID
	Email     string
	UpdatedAt time.Time
}

// TODO: Not implemented
func (q *Queries) UpdateCustomerEmail(ctx context.Context, arg UpdateCustomerEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerEmail, arg.ID, arg.Email, arg.UpdatedAt)
	return err
}

const updateCustomerName = `-- name: UpdateCustomerName :exec
UPDATE customers
SET name = $2,
updated_at = $3
WHERE id = $1
`

type UpdateCustomerNameParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) UpdateCustomerName(ctx context.Context, arg UpdateCustomerNameParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerName, arg.ID, arg.Name, arg.UpdatedAt)
	return err
}

const updateCustomerPassword = `-- name: UpdateCustomerPassword :exec
UPDATE customers
SET password_hash = $2,
updated_at = $3
WHERE id = $1
`

type UpdateCustomerPasswordParams struct {
	ID           uuid.UUID
	PasswordHash string
	UpdatedAt    time.Time
}

// TODO: Not implemented
func (q *Queries) UpdateCustomerPassword(ctx context.Context, arg UpdateCustomerPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerPassword, arg.ID, arg.PasswordHash, arg.UpdatedAt)
	return err
}

const updateCustomerPhotoUrl = `-- name: UpdateCustomerPhotoUrl :exec
UPDATE customers
SET photourl = $2,
updated_at = $3
WHERE id = $1
`

type UpdateCustomerPhotoUrlParams struct {
	ID        uuid.UUID
	Photourl  sql.NullString
	UpdatedAt time.Time
}

func (q *Queries) UpdateCustomerPhotoUrl(ctx context.Context, arg UpdateCustomerPhotoUrlParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerPhotoUrl, arg.ID, arg.Photourl, arg.UpdatedAt)
	return err
}
