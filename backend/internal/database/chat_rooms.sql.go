// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: chat_rooms.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChatRoom = `-- name: CreateChatRoom :one
INSERT INTO chat_rooms(id, customer_id, company_id, created_at, updated_at, company_name, customer_name)
VALUES($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (company_id, customer_id) DO UPDATE SET updated_at = EXCLUDED.updated_at
RETURNING id, customer_id, customer_name, company_id, company_name, created_at, updated_at
`

type CreateChatRoomParams struct {
	ID           uuid.UUID
	CustomerID   uuid.UUID
	CompanyID    uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	CompanyName  string
	CustomerName string
}

func (q *Queries) CreateChatRoom(ctx context.Context, arg CreateChatRoomParams) (ChatRoom, error) {
	row := q.db.QueryRowContext(ctx, createChatRoom,
		arg.ID,
		arg.CustomerID,
		arg.CompanyID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CompanyName,
		arg.CustomerName,
	)
	var i ChatRoom
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.CustomerName,
		&i.CompanyID,
		&i.CompanyName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserChatRooms = `-- name: GetUserChatRooms :many
SELECT id, customer_id, customer_name, company_id, company_name, created_at, updated_at FROM chat_rooms WHERE customer_id = $1 or company_id = $1
`

func (q *Queries) GetUserChatRooms(ctx context.Context, customerID uuid.UUID) ([]ChatRoom, error) {
	rows, err := q.db.QueryContext(ctx, getUserChatRooms, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatRoom
	for rows.Next() {
		var i ChatRoom
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.CustomerName,
			&i.CompanyID,
			&i.CompanyName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
