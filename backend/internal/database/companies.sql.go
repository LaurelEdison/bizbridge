// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: companies.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies(id, name, email, password_hash, address, description, photourl, username, created_at, updated_at)
	VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
	RETURNING id, name, email, password_hash, address, description, photourl, username, created_at, updated_at
`

type CreateCompanyParams struct {
	ID           uuid.UUID
	Name         string
	Email        string
	PasswordHash string
	Address      string
	Description  sql.NullString
	Photourl     sql.NullString
	Username     sql.NullString
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Address,
		arg.Description,
		arg.Photourl,
		arg.Username,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Address,
		&i.Description,
		&i.Photourl,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyByEmail = `-- name: GetCompanyByEmail :one
SELECT id, name, email, password_hash, address, description, photourl, username, created_at, updated_at FROM companies WHERE email = $1
`

func (q *Queries) GetCompanyByEmail(ctx context.Context, email string) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByEmail, email)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Address,
		&i.Description,
		&i.Photourl,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, name, email, password_hash, address, description, photourl, username, created_at, updated_at FROM companies WHERE id = $1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id uuid.UUID) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Address,
		&i.Description,
		&i.Photourl,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCompanyAddress = `-- name: UpdateCompanyAddress :exec
UPDATE companies
SET address = $2,
updated_at =$3
WHERE id = $1
`

type UpdateCompanyAddressParams struct {
	ID        uuid.UUID
	Address   string
	UpdatedAt time.Time
}

func (q *Queries) UpdateCompanyAddress(ctx context.Context, arg UpdateCompanyAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyAddress, arg.ID, arg.Address, arg.UpdatedAt)
	return err
}

const updateCompanyDescription = `-- name: UpdateCompanyDescription :exec
UPDATE companies
SET description = $2,
updated_at =$3
WHERE id = $1
`

type UpdateCompanyDescriptionParams struct {
	ID          uuid.UUID
	Description sql.NullString
	UpdatedAt   time.Time
}

func (q *Queries) UpdateCompanyDescription(ctx context.Context, arg UpdateCompanyDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyDescription, arg.ID, arg.Description, arg.UpdatedAt)
	return err
}

const updateCompanyEmail = `-- name: UpdateCompanyEmail :exec

UPDATE companies
SET email = $2,
updated_at =$3
WHERE id = $1
`

type UpdateCompanyEmailParams struct {
	ID        uuid.UUID
	Email     string
	UpdatedAt time.Time
}

// TODO: Implement these at some point
func (q *Queries) UpdateCompanyEmail(ctx context.Context, arg UpdateCompanyEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyEmail, arg.ID, arg.Email, arg.UpdatedAt)
	return err
}

const updateCompanyName = `-- name: UpdateCompanyName :exec
UPDATE companies
SET name = $2,
updated_at =$3
WHERE id = $1
`

type UpdateCompanyNameParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) UpdateCompanyName(ctx context.Context, arg UpdateCompanyNameParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyName, arg.ID, arg.Name, arg.UpdatedAt)
	return err
}

const updateCompanyPasswordHash = `-- name: UpdateCompanyPasswordHash :exec
UPDATE companies
SET password_hash = $2,
updated_at =$3
WHERE id = $1
`

type UpdateCompanyPasswordHashParams struct {
	ID           uuid.UUID
	PasswordHash string
	UpdatedAt    time.Time
}

func (q *Queries) UpdateCompanyPasswordHash(ctx context.Context, arg UpdateCompanyPasswordHashParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyPasswordHash, arg.ID, arg.PasswordHash, arg.UpdatedAt)
	return err
}

const updateCompanyPhotoUrl = `-- name: UpdateCompanyPhotoUrl :exec
UPDATE companies
SET photourl = $2,
updated_at =$3
WHERE id = $1
`

type UpdateCompanyPhotoUrlParams struct {
	ID        uuid.UUID
	Photourl  sql.NullString
	UpdatedAt time.Time
}

func (q *Queries) UpdateCompanyPhotoUrl(ctx context.Context, arg UpdateCompanyPhotoUrlParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyPhotoUrl, arg.ID, arg.Photourl, arg.UpdatedAt)
	return err
}

const updateCompanyUsername = `-- name: UpdateCompanyUsername :exec
UPDATE companies
SET username = $2,
updated_at =$3
WHERE id = $1
`

type UpdateCompanyUsernameParams struct {
	ID        uuid.UUID
	Username  sql.NullString
	UpdatedAt time.Time
}

func (q *Queries) UpdateCompanyUsername(ctx context.Context, arg UpdateCompanyUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyUsername, arg.ID, arg.Username, arg.UpdatedAt)
	return err
}
