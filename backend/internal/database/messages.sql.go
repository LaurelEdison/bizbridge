// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: messages.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages(id, chat_room_id, sender_id, content, sent_at, role)
VALUES($1, $2, $3, $4, $5, $6)
RETURNING id, chat_room_id, sender_id, role, content, file_url, file_name, file_size, sent_at, is_read
`

type CreateMessageParams struct {
	ID         uuid.UUID
	ChatRoomID uuid.UUID
	SenderID   uuid.UUID
	Content    sql.NullString
	SentAt     sql.NullTime
	Role       string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ID,
		arg.ChatRoomID,
		arg.SenderID,
		arg.Content,
		arg.SentAt,
		arg.Role,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.SenderID,
		&i.Role,
		&i.Content,
		&i.FileUrl,
		&i.FileName,
		&i.FileSize,
		&i.SentAt,
		&i.IsRead,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT id, chat_room_id, sender_id, role, content, file_url, file_name, file_size, sent_at, is_read FROM messages WHERE chat_room_id = $1
`

func (q *Queries) GetMessages(ctx context.Context, chatRoomID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessages, chatRoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatRoomID,
			&i.SenderID,
			&i.Role,
			&i.Content,
			&i.FileUrl,
			&i.FileName,
			&i.FileSize,
			&i.SentAt,
			&i.IsRead,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
